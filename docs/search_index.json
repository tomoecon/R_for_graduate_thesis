[
["index.html", "卒業論文のためのR入門 Chapter 1 はじめに 1.1 この文書で学ぶこと 1.2 この文書の作成目的", " 卒業論文のためのR入門 森 知晴（立命館大学総合心理学部） Last Update: 2020-09-03 Chapter 1 はじめに この文書は、卒業論文を書くためのRの使い方をできるだけコンパクトにまとめたものです。 読者は立命館大学総合心理学部森ゼミの学生をピンポイントに想定しています。 Rを用いた演習として「心理学データ解析法」の履修を推奨していますが、履修していなくてもわかるように構成しています。 卒業論文自体はWordで作成する想定で、Rで得られた結果をWordに貼り付ける（簡便な）方法を説明します。 一般的なRの入門文書としても参照できます。 説明の都合上、厳密さよりわかりやすさを重視した記述が多々あります。ご了承ください。 1.1 この文書で学ぶこと 具体的には、以下の項目を学習します。 R, RStudioをインストールし、基本的な操作ができるようになる データをRStudioにインポートする インポートしたデータを分析可能な形に前処理する 記述統計を整理する データを可視化する t検定を行う 重回帰分析を行い、論文に貼り付けられる形に整える 文書は前から順番に読み、自分でコードを打って確かめてください。 Chapter 2を読んでRとRStudioを準備し、登場するコードを自分で入力して練習してみてください。 この文書で紹介している方法はあくまで一例です。 Rには様々な機能やパッケージがあり、日々進化しています。 この文書の内容を理解したら、ぜひ自分で様々な機能を調べて使ってみてください！ ★参考文献 浅野正彦・中村公亮（2018）はじめてのRStudio エラーメッセージなんてこわくない、オーム社 松村優哉・湯谷啓明・紀ノ定保礼・前田和寛（2018）RユーザのためのRStudio[実践]入門 −tidyverseによるモダンな分析フローの世界− 1.2 この文書の作成目的 この節は余談なので、読み飛ばしても問題ありません。 この文書はゼミ生の卒業論文執筆にあたりマニュアルが必要だと考え作成しました。 以下のことを意識して説明しました。 統計やコンピュータが苦手が学生を念頭におく 最小限の説明を心がける ついつい教えたくなってしまうのが教員の性分ですが、ぐっとこらえて最小限を目指しました。 tidyverse及びパイプ%&gt;%を活用する tidyverseはとても便利でコードがわかりやすくなるので、最初からそれを前提とした文書にしました。 "],
["InstallR.html", "Chapter 2 R(Studio)のインストール", " Chapter 2 R(Studio)のインストール R(Studio)のインストールは最大の難関となる可能性があります（特にWindowsの場合）。 紹介するマニュアルを丁寧に読んでインストールしてください。 インストール方法は高知工科大学の矢内勇生先生のサイトで紹介されているので、そちらをご覧ください。 http://yukiyanai.github.io/jp/resources/ インストールのポイント（Windows） 矢内先生のスライドを丁寧に読み一つ一つ手順を追って進める インストール1（プログラミング用フォント）はわからなければスキップしても良い インストール4（Rtools）はスキップする RStudioのカスタマイズはスキップする ディレクトリ（フォルダ）の名前に日本語（中国語・韓国語）が含まれている場合、大きな問題となり得る → 対処法をよく読む OneDriveでのバックアップ機能が使われている場合、大きな問題となり得る → 対処法をよく読む インストールのポイント（macOS） 矢内先生のスライドを丁寧に読み一つ一つ手順を追って進める RStudioのカスタマイズはスキップする 資料を読んで操作してもよくわからなかった場合、森の授業・ゼミの受講生は連絡してください。 "],
["RStudio.html", "Chapter 3 RStudioの使い方 3.1 RStudioの起動 3.2 RStudioの画面 3.3 RStudioの操作 3.4 スクリプトの保存 3.5 プロジェクトの作成", " Chapter 3 RStudioの使い方 3.1 RStudioの起動 それでは、RStudioを起動してみましょう。 正しくインストールされていれば、Windowsはスタートメニュー、Macの場合はアプリケーションのアイコンをクリックして起動できるはずです。 R本体はインストールされていればOKです。自分で起動する必要はありません。 RStudioは今後何度も起動するので、ショートカットを作ってデスクトップから起動できるようにしておくと便利です。 3.2 RStudioの画面 人によって多少異なりますが、RStudioを起動した画面は以下のようになっています。 RStudioは通常4つのウィンドウ（ペーンと呼びます）に分割されます。 ここでは各ペーンの概要を説明します。 左上のペーンはRStudioを動かすためのコードを書く場所です。表示されていなければ、左上の緑の＋をクリックし、「R Script」を選択してください。 左下のペーンはコンソールと呼ばれる、コードの実行結果を表示する場所です。ここに直接コードを書くこともできますが、コードは保存されません。 右上のペーンは後述する「オブジェクト」が表示される場所です。 右下のペーンはファイルやパッケージなどが表示される場所です。 3.3 RStudioの操作 それでは、実際に操作してみましょう。Rスクリプトに1 + 1と打ってみてください。 これが1行のコードになります。この行にカーソルを合わせた状態で、WindowsではCtrl + Enter、MacではCommand + Enterを押してください。 （スクリプト右上のRunを押しても良いです） すると、コンソールに結果が表示されました。&gt; 1 + 1は実行したコードを表しています。 [1]は行番号を表します。その右側が結果です。 もう少しコードを書いてみましょう。3 - 1 2 * 3 6 / 2と3行のコードを書いてください。 これをまとめて選択してCtrl + Enter (Command + Enter)を押してください。 すると、それぞれの計算結果が表示されました。 スクリプトにコードを書く→実行してコンソールで結果を確認、という一連の作業を繰り返して慣れていきましょう。 3.4 スクリプトの保存 スクリプトはWindowsはCtrl + S、MacはCommand + Sで保存することができます。 スクリプトを保存しておけば、次回に書き直す必要はありません。 卒業論文では、何度もスクリプトを書き直すので、きちんと保存しておきましょう。 3.5 プロジェクトの作成 RStudioには「プロジェクト」という機能があり、これを使うとファイル管理がしやすくなります。 プロジェクトはコンピュータ内にフォルダを作成し（または既存のフォルダを指定し）、そのフォルダの中で作業を行います。 プロジェクトを作成してみましょう。 左上の左から２つ目の緑の＋を押してください。 表示されるウィンドウで、&quot;New Directory&quot;を選んでください。 次のウィンドウでは、&quot;New Project&quot;を選んでください。 次の画面で作成するフォルダ名（プロジェクト名になります）とフォルダの作成場所を指定します。 フォルダ名は英数字のみとしてください。フォルダを作成する場所も英数字となるような場所にしてください。 指定したら、Create Projectを押してプロジェクトを作成してください。 コンピュータで指定したフォルダに行き、フォルダが新たに作成されていること、[プロジェクト名.Rproj]というファイルが中に作成されていることを確認してください。 Testというフォルダが新たに作られ、中にTest.Rprojというファイルが入っています。 RStudioを使う際は、プロジェクトをベースに作業するようにしましょう。 起動の際は、プロジェクト名.Rprojをクリックして起動する。 使用するファイルは、プロジェクトのフォルダに移動・保存するようにする。 RStudioでファイルを作成した場合、このフォルダに保存されます。 試しに、新しいRスクリプトを作成（左上の緑の＋を押す）し、保存して見てください。 フォルダ内にRスクリプト（.Rで終わるファイル）ができていれば成功です。 "],
["Packages.html", "Chapter 4 パッケージのインストール", " Chapter 4 パッケージのインストール Rの機能を拡張するため、必要なパッケージをインストールします。 まずは、重要なパッケージがまとめられているtidyverse（読み：タイディバース）をインストールしましょう。 その他のパッケージは必要になる度に紹介します。 install.packages(&quot;tidyverse&quot;) library(tidyverse) install.packages()は各パソコンで一度実行すればOKです。 library()はRStudioを起動するたびに実行する必要があります。 Rスクリプトの冒頭に使用するlibrary()を並べておき、起動するたびに実行するようにしましょう。 確認のため、以下のコードを打って、動作するかどうか確認してみてください。 （データセットmtcarsの変数mpgの平均を計算するコードです） mtcars %&gt;% summarize(mean_mpg = mean(mpg)) ## mean_mpg ## 1 20.09062 ここでエラーが起きた場合、R(Studio)のインストールがうまくいっていない可能性があります。 Chapter 2に戻って確認しましょう。 library(tidyverse) "],
["Rbasics.html", "Chapter 5 Rの基本操作 5.1 オブジェクト 5.2 簡単な計算 5.3 関数 5.4 データフレーム", " Chapter 5 Rの基本操作 5.1 オブジェクト Rで使用するあらゆる「モノ」はオブジェクト（object）と呼ばれ管理されます。 オブジェクトの準備からRの分析はスタートします。まずは、オブジェクトを準備してみましょう。 first_object &lt;- 1 オブジェクトは「名前」と「中身」で構成されます。 このコマンドでは、first_objectという名前のオブジェクトに「1」という数値を入れています。 &lt;-（不等号・ハイフン）は矢印を表していて、左側の名前のオブジェクトに右側の「モノ」を代入する命令です。 このコマンドを実行しても何も表示されませんが、それでOKです。 オブジェクトの名前を指定すると、オブジェクトの中身を表示させることができます。 first_object ## [1] 1 [1]は「1行目」を意味しています。そのあとの「1」が中身です。 また、代入する命令を()でくくることで、代入させつつ表示させることができます。 second_objectに2を入れて表示させてみましょう。 (second_object &lt;- 2) ## [1] 2 文字列をオブジェクトに入れることもできます。 この場合、文字列を&quot;&quot;（引用符）でくくります。 first_string_object &lt;- &quot;Ritsumeikan University&quot; first_string_object ## [1] &quot;Ritsumeikan University&quot; ここでは、first_string_objectという名前のオブジェクトに、文字列&quot;Ritsumeikan University&quot;を入れています。 オブジェクトに入れるものは1つの値ではなく、複数の値にすることもできます。 複数の値を並べたものは「ベクトル」と呼ばれます。 ベクトルはc()でまとめます。 first_vector_object &lt;- c(1, 2, 3, 4, 5) first_vector_object ## [1] 1 2 3 4 5 ここでは、first_vector_objectというオブジェクトに、1から5までの数値を代入しています。 文字列のベクトルも作ることができるので、試してみてください。 ★練習問題 third_objectという名前のオブジェクトに10000を代入し、確認してください。 my_nameという名前のオブジェクトにあなたの名前（文字列）を代入し、確認してください。 second_vector_objectという名前のオブジェクトに数値のベクトル1, 1, 2, 3, 5, 8を代入し、確認してください。 5.2 簡単な計算 Rでの簡単な計算をしてみましょう。足し算・引き算は日常用語と同じく+, -を用います。 1 + 1 ## [1] 2 5 - 2 ## [1] 3 掛け算は*、割り算は/を使います。また、累乗は^です。日常用語とは異なりますが、Excelと同じです。 2 * 3 ## [1] 6 10 / 2 ## [1] 5 4 ^ 2 ## [1] 16 ここまでは数値同士で計算させていましたが、数値を代入したオブジェクトも使うことができます。例えば、`age'に年齢を代入しておき、10年後の年齢を計算させてみましょう。 age &lt;- 20 age + 10 ## [1] 30 ここまでは計算結果を単に表示させていました。計算結果をオブジェクトに代入することもできます。 例えば、1 + 1の結果をone_plus_oneというオブジェクトに代入してみましょう。 one_plus_one &lt;- 1 + 1 one_plus_one ## [1] 2 オブジェクトone_plus_oneには計算結果2が代入されています。 ★練習問題 オブジェクトaに3を、オブジェクトbに4を代入してください。 a, bそれぞれを2乗したものの和をとり、結果が25となることを確認してください。 5.3 関数 Rではオブジェクトから別のオブジェクトを生成するために「関数（function）」を用います。 関数の使い方に慣れていきましょう。 関数は関数名(引数)という構造で使います。 引数（argument）は「ひきすう」と読みます。 ここでは、簡単な関数の例を紹介します。 その他の関数はその都度紹介します。 5.3.1 数値に対する関数 皆さんが数学で勉強してきた関数をRの関数として使うことができます。例えば平方根をとる関数sqrt()を使ってみましょう。 sqrt(4) ## [1] 2 ここでは、sqrt()が関数、引数は4です。4の平方根をとった結果として2が表示されています。他の数式として例えば自然対数をとるlog()があります。 ★練習問題 オブジェクトaに3を、オブジェクトbに4を代入してください。（前の問題と同様） a, bそれぞれの2乗して和をとったものの平方根をとり、結果が5となることを確認してください。 ヒント：前の問題の計算全体をsqrt()のかっこでくくってください。 5.3.2 ベクトルに対する関数 関数の引数は数値だけでなく、ベクトルをとることもできます。統計分析ではこちらをよく使います。例えば、年齢のデータが入ったベクトルage_vector &lt;- c(18, 21, 22, 23, 34)を考えます。 例えば、ベクトルの最小値を取り出すmin()を使ってみましょう。 age_vector &lt;- c(18, 21, 22, 23, 34) min(age_vector) ## [1] 18 一番年齢が若い人が18歳であることが確認できます。最大値を取り出すのはmax()です。 心理学統計法で学んだ平均・標準偏差などの統計量も計算することができます。平均はmean()、中央値はmedian()、（不偏）標準偏差はsd()を使います。 mean(age_vector) ## [1] 23.6 median(age_vector) ## [1] 22 sd(age_vector) ## [1] 6.107373 ★練習問題 オブジェクトincome_vectorに数値のベクトル10, 100, 1000, 10000, 100000を代入してください。 income_vectorの平均・中央値・標準偏差をそれぞれ求めてください。 5.4 データフレーム 多くのデータは、表形式でまとめられます。 縦方向に観測値を、横方向に変数を並べたデータのことをRではデータフレームと呼びます。 例として、年齢のベクトルage_vectorと性別のベクトルgender_vectorを合わせてデータフレームを作成してみましょう。 データフレームを作成する関数はdata.frame()です。 age &lt;- c(18, 21, 22, 23, 34) #年齢のベクトルの作成 gender &lt;- c(&quot;female&quot;, &quot;male&quot;, &quot;male&quot;, &quot;female&quot;, &quot;female&quot;) #性別のベクトルの作成 first_dataframe &lt;- data.frame(age, gender) first_dataframe ## age gender ## 1 18 female ## 2 21 male ## 3 22 male ## 4 23 female ## 5 34 female 1人目が18歳の女性、2人目が21歳の男性…を表すデータフレームが作成できました。 Chapter @ref(#ImportData)ではExcelファイルなどからデータのRにインポートする方法を学びますが、その際は自動的にデータフレームとしてインポートされます。 データ分析の際に、データフレームのうち特定の変数だけを使いたい場合がよくあります。 その際は、データフレーム名$変数名と表記することで、特定の変数を使うことができます。 例えば、先ほど作成したfirst_dataframeから性別の変数のみを見てみましょう。 first_dataframe$gender ## [1] female male male female female ## Levels: female male 性別のベクトルを取り出すことができました。 関数と組み合わせると、年齢の平均値を以下のように計算できます。 mean(first_dataframe$age) ## [1] 23.6 ★練習問題 オブジェクトincomeに数値のベクトル10, 100, 1000, 10000, 100000を代入してください。 オブジェクトcityに文字列のベクトル&quot;ibaraki&quot;, &quot;takatsuki&quot;, &quot;ibaraki&quot;, &quot;takatsuki&quot;, &quot;takatsuki&quot;を代入してください。 incomeとcityを合わせたデータフレームincome_dataを作成してください。 income_dataを用いて、incomeの中央値を求めてください。 "],
["ImportData.html", "Chapter 6 データのインポート 6.1 インポートの準備 6.2 ファイル形式別のインポート方法 6.3 インポートしたデータの確認", " Chapter 6 データのインポート データ分析のためには、データをRStudioにインポート（読み込み）させなければなりません。インポートの方法は、持っているデータのファイル形式によって変わります。 6.1 インポートの準備 インポートしたいファイルは、プロジェクトと同じフォルダに入れておきましょう。 プロジェクトはChapter 3で学習しています。 インポートしたいファイルの形式も確認しておきましょう。 代表的な形式として、CSVファイル（.csv）、Excelファイル（.xlsx, .xls）があります。 拡張子が表示されていない場合はこちらを参考に表示させるようにしましょう。 インポートの前に、ファイルの1行目は変数名（英語）にしておきましょう。 6.2 ファイル形式別のインポート方法 6.2.1 CSVファイルの場合（.csv） CSVファイルの場合は、read_csvを用います。ファイルの名前がsotsuron.csvの場合、以下のように実行します。 data_original &lt;- read_csv(&quot;sotsuron.csv&quot;) これは、csvファイルの内容をdata_originalというオブジェクトに収納しています。 オブジェクト名は自由につけることができますが、わかりやすいものにしましょう。 ここでは、インポートした元データであることを明示するため、data_originalという名前にしています。 6.2.2 Excelファイルの場合（.xlsx） Excelファイルの場合は、新しいパッケージreadxlをインストールする必要があります。 install.packages(&quot;readxl&quot;) library(readxl) read_excelを使ってデータをインポートします。 data_original &lt;- read_excel(&quot;sotsuron.xlsx&quot;) 6.2.3 Qualtricsのデータの場合 Qualtricsのデータの場合、qualtRicsという専用のパッケージが便利です。 install.packages(&quot;qualtRics&quot;) library(qualtRics) QualtricsからはCSV形式でデータをエクスポートしてください。エクスポートしたCSVファイルをread_surveyを使ってデータをインポートします。 data_original &lt;- read_survey(&quot;sotsuron.csv&quot;) エクスポート前に、Qualtrics上で変数にわかりやすい名前をつけておくようにすると良いです。 また、エクスポートの際には「数値を使用」を選択しておきましょう。 6.3 インポートしたデータの確認 データがきちんとインポートされたかどうか、確認しておきましょう。 右上のペーンの&quot;Data&quot;に新しいオブジェクトができているか確認（上の例ではdata_original） クリックして左上のペーンに出てくるか確認 head(data_original)で先頭のデータを確認 str(data_original)で各変数の「型」（後で説明）を確認 library(wooldridge) "],
["Hypotheses.html", "Chapter 7 仮説とデータの具体例 7.1 仮説の確認 7.2 変数の確認 7.3 データの具体例", " Chapter 7 仮説とデータの具体例 7.1 仮説の確認 データ分析に入る前に、卒業研究で何を分析したいのかを整理しましょう。 データ分析は何らかの目的・仮説を持っておこなうもので、やみくもにやろうとすると迷子になってしまいます。 具体的には、基本的な仮説は2変数の関係に帰着させましょう。 被説明変数 ← 説明変数 この文書では（経済学の例で申し訳ありませんが）家計のデータを用い、収入が教育年数や年齢とどう関係するか、といった分析を行います。 例えば、「教育年数が高いほど収入が高い」という仮説が考えられます。 収入（被説明変数） ← 教育年数（説明変数） 仮説は複数あっても良いですが、あまり多すぎると論文の主題がぼやけてしまいます。少数に絞りましょう。 7.2 変数の確認 仮説を考えたあとは、インポートしたデータのうちどの変数を使うのかを考えましょう。 データにある変数をそのまま使える場合もあれば、自分で加工して作成する場合もあります。 使用したい変数が連続変数なのか、カテゴリ変数なのかは今後のデータ前処理や分析において重要です。 連続変数（身長、年齢、など） カテゴリ変数（性別、総合心理学部生かどうか、など） 例で示した収入は連続変数となります。 教育年数は連続変数として扱う場合もありますし、高卒かどうか、大卒かどうか、などカテゴリ変数に変換する場合もあります。 このように、分析者がどのような変数にするかを判断する場合もあります。 他の例をあげると、5件法（1〜5）で聞いたアンケート項目については、以下のパターンがあり得ます。分析の都合に合わせて使い分けましょう。 連続変数として使う 5段階のカテゴリ変数として使う 少数のカテゴリ変数として使う（1, 2を「低い」、3, 4, 5を「高い」と振り直す、など） 7.3 データの具体例 この文書では、wooldridge1パッケージに入っているデータsavingを用いた分析例を説明していきます。 パッケージをインストールして呼び出しましょう。 install.packages(&quot;wooldridge&quot;) library(wooldridge) データはdata()で読み込むことができます。 data(&quot;saving&quot;) head()を用いて、データの先頭を確認してみましょう。 head(saving) ## sav inc size educ age black cons ## 1 30 1920 4 2 40 1 1890 ## 2 874 12403 4 9 33 0 11529 ## 3 370 6396 2 17 31 0 6026 ## 4 1200 7005 3 9 50 0 5805 ## 5 275 6990 4 12 28 0 6715 ## 6 1400 6500 4 13 33 0 5100 このデータは、1980年代後半アメリカのデータとなっています。各変数の説明は以下のとおりです。 sav: 貯蓄（年間、ドル） inc: 収入（年間、ドル） size: 家族の人数 educ: 教育年数 age: 年齢 black: 黒人ダミー cons: 消費（年間、ドル） このデータから、以下のような仮説を立て検証していきます。 教育年数が高いほど、収入や貯蓄が多い 年齢が高いほど、収入や貯蓄が多い 黒人とそれ以外では収入や貯蓄が異なる ここでは、収入や貯蓄を被説明変数、教育年数・年齢・黒人ダミーを説明変数としています。 その他の変数も適宜使用します。 library(tidyverse) library(wooldridge) data(&quot;saving&quot;) Wooldridgeは計量経済学の有名な教科書 &quot;Introductory Econometrics: A Modern Approach&quot;の著者です。この教科書に掲載されているデータを使用します。↩ "],
["DataHandling.html", "Chapter 8 データ前処理 8.1 パイプ（%&gt;%）による処理 8.2 変数の作成（及び置換） 8.3 カテゴリ変数の処理 8.4 変数の選択 8.5 変数の並び替え 8.6 すべての作業をパイプでつなげる", " Chapter 8 データ前処理 データをインポートしたら、いざ分析だ！…と分析してみたくなります。 しかし、収集したデータはそのまま分析に進むことはできず、分析のために「前処理」する必要があります。 「データ分析は前処理が8割」とも言われます。 前処理の方法を学んでいきましょう。 データ前処理にはdplyr（読み：ディープライアール）というパッケージの関数を主に用います。 dplyrはtidyverseの一部なので、tidyverseがインストールされていればOKです。 8.1 パイプ（%&gt;%）による処理 最近はパイプ%&gt;%を用いてデータの受け渡しを行うのが主流となっています。 パイプはmagrittrパッケージの機能ですが、tidyverseと同時にインストールされています。 まずは例を見てみましょう。 saving %&gt;% head() ## sav inc size educ age black cons ## 1 30 1920 4 2 40 1 1890 ## 2 874 12403 4 9 33 0 11529 ## 3 370 6396 2 17 31 0 6026 ## 4 1200 7005 3 9 50 0 5805 ## 5 275 6990 4 12 28 0 6715 ## 6 1400 6500 4 13 33 0 5100 この結果は、前のChapterで見たhead(saving)と同じ結果です。 パイプを用いると、パイプの前のオブジェクトをパイプの後の関数の引数としてくれます。 パイプを用いた書き方は以下のとおりです。 使用するオブジェクトを示す: saving パイプでつなぐ: %&gt;% 使用する関数を書く: head() 別の例を見てみましょう。 saving$sav %&gt;% mean() ## [1] 1582.51 まずデータフレームsaving内の変数sav（貯蓄）を示すオブジェクトsaving$savを書きます。 これを平均を求める関数mean()にパイプ%&gt;%でつなぎます。 すると、貯蓄の平均を求めることができます。 ここまででは何が便利なのかわからないかもしれませんが、パイプを用いたほうがコードをわかりやすく書くことができます。 ★練習問題 パイプを使って100の平方根を求めてください。 パイプを使ってsavingの変数incの中央値を求めてください。 8.2 変数の作成（及び置換） 分析の際には、収集したデータを分析しやすいように作成・置換することはよくあります。 新しい変数を作成したい 質問紙に逆転項目を設けていたので、変数を逆にしたい 変数を標準化したい 数値で入力された変数をカテゴリ変数として扱いたい 連続変数をカテゴリ変数に変換したい 変数を追加・置換するdplyrの関数がmutate()です。 8.2.1 変数の新規作成 mutate()を用いて、貯蓄savを収入incで割った新しい変数「貯蓄率」saving_rateを作ってみましょう。 saving_with_rate &lt;- saving %&gt;% mutate(saving_rate = sav / inc) head(saving_with_rate) ## sav inc size educ age black cons saving_rate ## 1 30 1920 4 2 40 1 1890 0.01562500 ## 2 874 12403 4 9 33 0 11529 0.07046682 ## 3 370 6396 2 17 31 0 6026 0.05784866 ## 4 1200 7005 3 9 50 0 5805 0.17130621 ## 5 275 6990 4 12 28 0 6715 0.03934192 ## 6 1400 6500 4 13 33 0 5100 0.21538462 1行目は2行目以降の結果を新たなデータフレームsaving_with_rateに代入するコードです。 2行目はデータフレームの指定とパイプです。savingをmutate()に入れるコードです。 3行目でmutateを使っています。割り算/を使って、新しい変数saving_rateを作成しました。 head(saving_with_rate)でどのようなデータフレームになったか、先頭6行を確認しています。 なお、1行目をsavingとすると、savingが上書きされます。 ★練習問題 savingに年齢ageを二乗した値age_squaredを加えたデータフレームを作成してください。 savingに収入incを円換算した値inc_yenを加えたデータフレームを作成してください。 当時の為替レートは1ドル=140円程度でした。 8.2.2 逆転項目の処理 mutateを利用して、「逆転項目」の前処理をしてみましょう。 逆転項目とは、質問紙では1, 2, 3, 4, 5として聞いた数値を、データでは5, 4, 3, 2, 1として扱うものです（5件法の場合）。 以下の操作をイメージしましょう。 全体にマイナスをかける→(1, 2, 3, 4, 5)が(-1, -2, -3, -4, -5)になる 全体に6を足す→(-1, -2, -3, -4, -5)が(5, 4, 3, 2, 1)になる つまり、元の変数にマイナスをかけ、6を足せば逆転項目が作成できます。 savingには逆転項目がないので、架空の数値を作成して確認してみましょう。 data &lt;- data.frame(Q1 = c(3, 2, 4, 1, 5)) #逆転項目Q1が入ったデータフレームを作成 data_gyakuten &lt;- data %&gt;% mutate(Q1_gyakuten = - Q1 + 6) data_gyakuten ## Q1 Q1_gyakuten ## 1 3 3 ## 2 2 4 ## 3 4 2 ## 4 1 5 ## 5 5 1 ★練習問題 7件法（1〜7）で収集した架空のデータフレームを作成し、逆転項目として処理してみてください。 8.2.3 変数の標準化 変数を平均0、標準偏差1の変数に変換する標準化は、変数の解釈を容易にしたり、以降の分析をしやすくするために必要です。 標準化を行う関数はscale()です。mutate()と組み合わせて、教育年数educを標準化した変数educ_standardizedを作ってみましょう。 saving_standardized_educ &lt;- saving %&gt;% mutate(educ_standardized = scale(educ)) head(saving_standardized_educ) ## sav inc size educ age black cons educ_standardized ## 1 30 1920 4 2 40 1 1890 -2.7886549 ## 2 874 12403 4 9 33 0 11529 -0.7510156 ## 3 370 6396 2 17 31 0 6026 1.5777150 ## 4 1200 7005 3 9 50 0 5805 -0.7510156 ## 5 275 6990 4 12 28 0 6715 0.1222584 ## 6 1400 6500 4 13 33 0 5100 0.4133497 ★練習問題 年収incを標準化した値inc_standardizedを加えたデータフレームを作成してください。 8.3 カテゴリ変数の処理 8.3.1 変数の型 Rで扱う変数には「型」と呼ばれる区別があります。 型の違いによって、今後の分析方法も変わってきます。 型を確認する方法として、オブジェクトの構造を確認する関数str()を使ってみましょう。 str(saving) ## &#39;data.frame&#39;: 100 obs. of 7 variables: ## $ sav : int 30 874 370 1200 275 1400 3159 1766 3984 1017 ... ## $ inc : int 1920 12403 6396 7005 6990 6500 26007 15363 14999 9185 ... ## $ size : int 4 4 2 3 4 4 5 5 5 5 ... ## $ educ : int 2 9 17 9 12 13 17 16 9 16 ... ## $ age : int 40 33 31 50 28 33 36 44 48 31 ... ## $ black: int 1 0 0 0 0 0 0 0 1 0 ... ## $ cons : int 1890 11529 6026 5805 6715 5100 22848 13597 11015 8168 ... ## - attr(*, &quot;time.stamp&quot;)= chr &quot;25 Jun 2011 23:03&quot; $の右が変数名、intと書かれているのが型です。 ここではすべてintとなっていますが、これは整数(integer)を表します。 以下の型はすべて数値として扱われます。 int: integer, 整数 dbl: double, 実数 num: numeric, 数値 8.3.2 カテゴリ変数への変換 カテゴリ変数を表す型はfct (factor)です。savingにはカテゴリ変数がないので、カテゴリ変数を作成してみましょう。 型を変換する関数がas_xxx()です。xxxは変換したい型の名前を入れてください。 ここでは、カテゴリ変数に変換したいので、as_factor()を用います。 今はinteger型となっているblackをカテゴリ変数にしてみましょう。 saving_with_factor &lt;- saving %&gt;% mutate(black_factor = as_factor(black)) str(saving_with_factor) ## &#39;data.frame&#39;: 100 obs. of 8 variables: ## $ sav : int 30 874 370 1200 275 1400 3159 1766 3984 1017 ... ## $ inc : int 1920 12403 6396 7005 6990 6500 26007 15363 14999 9185 ... ## $ size : int 4 4 2 3 4 4 5 5 5 5 ... ## $ educ : int 2 9 17 9 12 13 17 16 9 16 ... ## $ age : int 40 33 31 50 28 33 36 44 48 31 ... ## $ black : int 1 0 0 0 0 0 0 0 1 0 ... ## $ cons : int 1890 11529 6026 5805 6715 5100 22848 13597 11015 8168 ... ## $ black_factor: Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 2 1 1 1 1 1 1 1 2 1 ... ここでは、mutateを使って、新たな変数black_factorを作成してみました。 str()を使って、型がFactorになったことが確認できます。 カテゴリ変数として扱いたい変数はすべてas_factorを使ってカテゴリ変数にしておきましょう。 また、文字列型(chr, character)の変数はこのままでは分析に使用できないので、必ずas_factorを実行しておきましょう。 ★練習問題 家族人数sizeをカテゴリ変数に変換したデータフレームを作成してください。 8.3.3 ダミー変数の作成 ある変数から、別のダミー変数を作成したいことはよくあります。 ここでは、教育年数のデータを12年を基準に「高卒以上」「高卒未満」の2つに区分してみましょう。 2つの場合分けの際には、if_else関数を使うと便利です。 if_else()はif_else(条件, 条件が成りたつ場合の値, 条件が成り立たない場合の値)と書いて使用します。 table(saving$educ) #教育年数の度数分布 ## ## 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ## 1 1 1 1 4 10 11 9 4 32 2 4 1 9 6 2 1 1 saving_with_hsdummy &lt;- saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0)) head(saving_with_hsdummy) ## sav inc size educ age black cons highschool ## 1 30 1920 4 2 40 1 1890 0 ## 2 874 12403 4 9 33 0 11529 0 ## 3 370 6396 2 17 31 0 6026 1 ## 4 1200 7005 3 9 50 0 5805 0 ## 5 275 6990 4 12 28 0 6715 1 ## 6 1400 6500 4 13 33 0 5100 1 table(saving_with_hsdummy$highschool) #作成したダミー変数の度数分布 ## ## 0 1 ## 42 58 highschoolという教育年数が12年以上であれば1、教育年数が12年未満であれば0を示すダミー変数を作成することができました。 なお、ここで作成した変数は連続変数として扱われているので、必要に応じてas_factor()も行っておきましょう。 saving_with_hsdummy &lt;- saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) #highschoolをfactor型として上書き head(saving_with_hsdummy) ## sav inc size educ age black cons highschool ## 1 30 1920 4 2 40 1 1890 0 ## 2 874 12403 4 9 33 0 11529 0 ## 3 370 6396 2 17 31 0 6026 1 ## 4 1200 7005 3 9 50 0 5805 0 ## 5 275 6990 4 12 28 0 6715 1 ## 6 1400 6500 4 13 33 0 5100 1 ★練習問題 「年齢が40代以上」を表すダミー変数over40を加えたデータフレームを作成してください。 8.3.4 カテゴリ変数の作成 2つのカテゴリにしたい場合は上記のif_elseが良いですが、3つ以上にしたい場合はcase_whenが便利です。 例えば年齢ageを年代別のカテゴリ変数にしてみましょう。 case_whenはcase_when(条件A ~ 条件が成り立つ場合の値, 条件B ~ 条件が成り立つ場合の値...と書いていきます。 summary(saving$age) #年齢の記述統計の確認 ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 26.00 33.00 38.50 38.77 44.00 54.00 saving_with_age_category &lt;- saving %&gt;% mutate(age_category = case_when(age &lt; 30 ~ &quot;20s&quot;, age &gt;= 30 &amp; age &lt; 40 ~ &quot;30s&quot;, age &gt;= 40 &amp; age &lt; 50 ~ &quot;40s&quot;, age &gt;= 50 ~ &quot;50s&quot; ) ) head(saving_with_age_category) ## sav inc size educ age black cons age_category ## 1 30 1920 4 2 40 1 1890 40s ## 2 874 12403 4 9 33 0 11529 30s ## 3 370 6396 2 17 31 0 6026 30s ## 4 1200 7005 3 9 50 0 5805 50s ## 5 275 6990 4 12 28 0 6715 20s ## 6 1400 6500 4 13 33 0 5100 30s 少し長くなってしまいましたが、年齢の条件別に年代別の文字列を割り当てました。 ここで生成した変数はchr(character)型になっているので、分析に使う場合はas_factorを行っておきましょう。 ★練習問題 年収6000ドル未満を&quot;poor&quot;、年収6000ドル以上12000ドル未満を&quot;middle&quot;、 年収12000ドル以上を&quot;rich&quot;、とするカテゴリ変数inc_categoryを追加したデータフレームを作成しなさい。 8.4 変数の選択 インポートしたデータの中に不要な変数が含まれていたり、前処理の結果不要になった変数が出てくることはよくあります。 dplyrの関数select()を用いると、データフレームの変数を選択したり、削除したりすることができます。 まずはsavingから収入incと年齢ageを取り出してみましょう。 saving_selected &lt;- saving %&gt;% select(inc, age) head(saving_selected) ## inc age ## 1 1920 40 ## 2 12403 33 ## 3 6396 31 ## 4 7005 50 ## 5 6990 28 ## 6 6500 33 2つの変数のみのデータフレームになりました。 ハイフン-を使うと、該当する変数を削除し、残りの変数はそのままとすることができます。 savingから消費consを取り除いてみましょう。 saving_deleted &lt;- saving %&gt;% select(-cons) head(saving_deleted) ## sav inc size educ age black ## 1 30 1920 4 2 40 1 ## 2 874 12403 4 9 33 0 ## 3 370 6396 2 17 31 0 ## 4 1200 7005 3 9 50 0 ## 5 275 6990 4 12 28 0 ## 6 1400 6500 4 13 33 0 ★練習問題 貯蓄sav、家族の人数size、黒人ダミーblackの3変数のデータフレームを作成してください。 教育年数educ、年齢ageを取り除いたデータを作成してください。 8.5 変数の並び替え データを確認する際に、ある変数をもとに並べ替えたい場合があります。 データを並べ替えるdplyrの関数がarrange()です。 ここでは、savingを収入incで並び替えてみましょう。 saving_arranged &lt;- saving %&gt;% arrange(inc) head(saving_arranged) ## sav inc size educ age black cons ## 1 0 750 2 4 49 0 750 ## 2 30 1920 4 2 40 1 1890 ## 3 50 2340 2 6 46 1 2290 ## 4 -112 2936 7 10 39 0 3048 ## 5 2575 3941 4 9 34 0 1366 ## 6 2483 4091 6 8 44 0 1608 値が小さいものが上、値が大きいものが下となる昇順で並び替えられます。 逆に降順にしたい場合は、desc()を利用します。 saving_arranged_desc &lt;- saving %&gt;% arrange(desc(inc)) head(saving_arranged_desc) ## sav inc size educ age black cons ## 1 1800 32080 2 16 54 0 30280 ## 2 10668 30996 4 12 41 0 20328 ## 3 4115 30610 4 16 44 0 26495 ## 4 3159 26007 5 17 36 0 22848 ## 5 -2749 24226 5 17 44 0 26975 ## 6 5082 19362 3 11 48 0 14280 8.6 すべての作業をパイプでつなげる これまで行ってきた一連の作業は、すべてパイプ%&gt;%でつなげることができます。 パイプでつなげることで作業の流れがわかりやすくなり、不要なオブジェクトを生成する必要もなくなります。 ここでは、以下の作業をまとめて行ってみましょう。 貯蓄率saving_rateの作成 家族人数sizeの削除 収入incで並び替え（降順） saving_handled &lt;- saving %&gt;% mutate(saving_rate = sav / inc) %&gt;% select(-size) %&gt;% arrange(desc(inc)) head(saving_handled) ## sav inc educ age black cons saving_rate ## 1 1800 32080 16 54 0 30280 0.05610973 ## 2 10668 30996 12 41 0 20328 0.34417344 ## 3 4115 30610 16 44 0 26495 0.13443319 ## 4 3159 26007 17 36 0 22848 0.12146730 ## 5 -2749 24226 17 44 0 26975 -0.11347313 ## 6 5082 19362 11 48 0 14280 0.26247289 コードが長くなるため、適宜#を使ってコメントを加えておくと良いでしょう。 saving_handled saving %&gt;% mutate(saving_rate = sav / inc) %&gt;% #貯蓄率の作成 select(-size) %&gt;% #家族人数の削除 arrange(desc(inc)) #収入で並び替え（高いものが上） "],
["SummaryStat.html", "Chapter 9 記述統計表の作成 9.1 数値の記述統計表の作成 9.2 カテゴリ変数の記述統計表の作成", " Chapter 9 記述統計表の作成 分析に入る前に、使用する変数の代表値や散布度を示すのは論文では必須です。 ここでは、summarytoolsパッケージを用いた方法を紹介します。まずはパッケージを準備しておきましょう。 install.packages(&quot;summarytools&quot;) library(summarytools) なお、このChapterでは表の作成方法を紹介します。 表をWordに貼り付ける方法については、Chapter (Word)を確認してください。 9.1 数値の記述統計表の作成 数値の記述統計表を作成するには、summarytoolsのdescr()を用います。 早速savingで使ってみましょう。 saving %&gt;% descr() ## Descriptive Statistics ## saving ## N: 100 ## ## age black cons educ inc sav size ## ----------------- -------- -------- ----------- -------- ---------- ---------- -------- ## Mean 38.77 0.07 8358.73 11.58 9941.24 1582.51 4.35 ## Std.Dev 7.40 0.26 5729.53 3.44 5584.00 3284.90 1.49 ## Min 26.00 0.00 -13055.00 2.00 750.00 -5577.00 2.00 ## Q1 33.00 0.00 5726.00 9.00 6508.00 189.00 3.00 ## Median 38.50 0.00 7561.50 12.00 8776.50 982.00 4.00 ## Q3 44.00 0.00 9987.00 13.00 11965.00 1838.50 5.00 ## Max 54.00 1.00 30280.00 20.00 32080.00 25405.00 10.00 ## MAD 8.15 0.00 3092.70 2.97 3463.35 1235.75 1.48 ## IQR 11.00 0.00 4131.50 4.00 5393.00 1640.25 2.00 ## CV 0.19 3.66 0.69 0.30 0.56 2.08 0.34 ## Skewness 0.24 3.32 0.91 0.05 1.98 4.15 0.84 ## SE.Skewness 0.24 0.24 0.24 0.24 0.24 0.24 0.24 ## Kurtosis -0.96 9.11 4.31 0.05 4.96 26.31 1.57 ## N.Valid 100.00 100.00 100.00 100.00 100.00 100.00 100.00 ## Pct.Valid 100.00 100.00 100.00 100.00 100.00 100.00 100.00 簡単に記述統計表が作成できました。しかし、この表は情報量が多く見づらいので、オプションを加えて編集していきましょう。 statsオプションで表示する値を選択 ここでは平均mean・標準偏差sd・最小値min・最大値max・観測値n.validを表示させます transposeオプションをTRUEにして行列を入れ替える headingオプションをFALSEにしてヘッダーを消す saving %&gt;% descr(stats = c(&quot;mean&quot;, &quot;sd&quot;, &quot;min&quot;, &quot;max&quot;, &quot;n.valid&quot;), transpose = TRUE, headings = FALSE) ## ## Mean Std.Dev Min Max N.Valid ## ----------- --------- --------- ----------- ---------- --------- ## age 38.77 7.40 26.00 54.00 100.00 ## black 0.07 0.26 0.00 1.00 100.00 ## cons 8358.73 5729.53 -13055.00 30280.00 100.00 ## educ 11.58 3.44 2.00 20.00 100.00 ## inc 9941.24 5584.00 750.00 32080.00 100.00 ## sav 1582.51 3284.90 -5577.00 25405.00 100.00 ## size 4.35 1.49 2.00 10.00 100.00 9.2 カテゴリ変数の記述統計表の作成 カテゴリ変数の記述統計については、以下の2つの方法が考えられます。 ダミー変数を作成し、前節で説明したdescr()をそのまま用いる 黒人ダミーblackがそのように処理されています summarytoolsのfreq()を用いて度数分布表を作成する ここでは後者の方法を説明します。 例として、Chapter (DataHandling)で説明した年齢のカテゴリ変数age_categoryを作成し、オブジェクトとして保存しておきます。 age_category &lt;- saving %&gt;% mutate(age_category = case_when(age &lt; 30 ~ &quot;20s&quot;, age &gt;= 30 &amp; age &lt; 40 ~ &quot;30s&quot;, age &gt;= 40 &amp; age &lt; 50 ~ &quot;40s&quot;, age &gt;= 50 ~ &quot;50s&quot; ) ) %&gt;% select(age_category) 作成した年齢のカテゴリ変数age_categoryをfreq()に入れます。 age_category %&gt;% freq() ## Frequencies ## age_category$age_category ## Type: Character ## ## Freq % Valid % Valid Cum. % Total % Total Cum. ## ----------- ------ --------- -------------- --------- -------------- ## 20s 12 12.00 12.00 12.00 12.00 ## 30s 44 44.00 56.00 44.00 56.00 ## 40s 31 31.00 87.00 31.00 87.00 ## 50s 13 13.00 100.00 13.00 100.00 ## &lt;NA&gt; 0 0.00 100.00 ## Total 100 100.00 100.00 100.00 100.00 度数分布表が作成できました。しかし、情報量が多いので、不要な情報をオプションで消しておきます。 age_category %&gt;% freq(report.nas = FALSE, totals = FALSE, cumul = FALSE, headings = FALSE) ## ## Freq % ## --------- ------ ------- ## 20s 12 12.00 ## 30s 44 44.00 ## 40s 31 31.00 ## 50s 13 13.00 シンプルな表ができました。オプションの説明は以下のとおりです。 report.nas = FALSE: 欠損値（NA）を表示しないようにする totals = FALSE: 合計を表示しないようにする cumul = FALSE: 累積値を表示しないようにする headings = FALSE: ヘッダーを表示しないようにする "],
["Visualization.html", "Chapter 10 データの可視化 10.1 1変数の可視化 10.2 2変数の可視化", " Chapter 10 データの可視化 データをグラフによって目に見える形でわかりやすく整理する「可視化」は論文においてとても重要です。 卒業論文では、データや結果を適切に伝えられるよう、グラフを作成していきましょう。 Rではggplot2というパッケージで見やすいグラフを作成することができます。 ggplot2はtidyverseに含まれています。 まずはggplot2の基本的な書き方について説明します。ggplot2は以下のように記述します。 使用するデータフレーム %&gt;% ggplot(aes(x = x軸の変数名, y = y軸の変数名)) + geom_グラフの名前() 1行目で使用するデータフレームを宣言し、パイプでつなげます。 2行目でグラフに各変数を宣言し、+でつなげます。 aesはaesthetic（美的、「エステ」の原語）の略です。 3行目で使用するグラフの名前を宣言します。 geom_bar: 棒グラフ geom_hitstogram: ヒストグラム geom_boxplot: 箱ひげ図 geom_point: 散布図 geom_smooth: 回帰直線 10.1 1変数の可視化 まずは、主要な変数がどのように分布しているかを可視化してみましょう。 1変数の可視化は、変数がどのような変数かによって使うグラフが異なります。 ここでは、カテゴリ変数に対する棒グラフ、連続変数に対するヒストグラムを説明します。 10.1.1 棒グラフ ここでは、1つのカテゴリ変数の分布を示すための棒グラフについて説明します。 例として、savingに含まれる世帯人数sizeがどのように分布しているかをみてみましょう。 saving %&gt;% mutate(size = as_factor(size)) %&gt;% #sizeをカテゴリ変数に変換して上書き ggplot(aes(x = size)) + geom_bar() 1変数の分布を示す関数はxのみを指定すれば良いです（yは不要です）。 geom_bar()は何も指定しなければ縦軸を観測数（count）にしてくれます。 ここでは家族の人数が4人が最も多く、以下5人、3人…の順に多いことがわかります。 10.1.2 ヒストグラム ここでは、1つの連続変数の分布を示すヒストグラムについて説明します。 例として、savingに含まれる年間収入incをヒストグラムにしてみましょう。 saving %&gt;% ggplot(aes(x = inc)) + geom_histogram() 棒グラフと同じくxのみを指定すれば良く、縦軸は観測数になっています。 ヒストグラムで重要なのは、ビン（棒のことです）の数や幅です。 geom_histogramはデフォルトでビンの数binsを30としていますが、見づらい場合は変えてみましょう。 例えば、ビンの数binsを15に減らしてみます。 saving %&gt;% ggplot(aes(x = inc)) + geom_histogram(bins = 15) #ビンの数を15に指定 ビンの数が少なくなり分布が滑らかになりましたが、細かい情報が見えづらくなり一長一短です。 工夫したい方は、ビンの幅を定めるbinwidthや位置を定めるcenterやboundaryも活用してください。 10.2 2変数の可視化 変数と変数の関係の可視化は、研究結果を示すのに重要です。 2変数の場合、それぞれの変数の種類によって適切な図が異なります。 連続変数と連続変数：散布図 連続変数とカテゴリ変数：散布図・棒グラフ・箱ひげ図 カテゴリ変数とカテゴリ変数：棒グラフ 10.2.1 散布図 連続変数と連続変数の関係を示すには、散布図が良いです。 散布図を描く関数がgeom_point()です。 ここでは、年齢ageと年間貯蓄incの関係を見てみましょう。 saving %&gt;% ggplot(aes(x = age, y = inc)) + geom_point() 2変数なので、xとyを指定します。xが横軸、yが縦軸になり、通常はxが独立変数、yが従属変数となります。 散布図ではそれぞれの点が観測値となっています。 このデータでは、年齢と年間収入にはそこまで関係がないように見えます。 散布図に回帰分析で推定される回帰直線を足してみましょう。 回帰直線を描くコマンドはgeom_smoothです。 saving %&gt;% ggplot(aes(x = age, y = inc)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = FALSE) ggplotはグラフを+でつなげて重ねることができます。ここでは、geom_point()で散布図を描き、その上にgeom_smooth()で回帰直線を重ねています。 geom_smooth()の引数methodでは、どのような線を描くのかを指定します。lmは線形モデル（linear model）を指定しています。（指定しないと別の線になります） seは標準偏差を見せる引数ですが、これをFALSEにして見せないようにしています。 カテゴリ変数と連続変数の関係を示すのにも、散布図を使うことができますが、弱点があります。 ここでは、教育年数educから高卒以上のダミー変数highschoolを作成した上で、年間収入incの違いを見ていきましょう。 saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) %&gt;% ggplot(aes(x = highschool, y = inc)) + geom_point() 散布図が書けました。しかし、点が固まってしまって見づらい図になってしまっています。 これを解決するには以下の方法があります。 geom_point()の代わりにgeom_jitter()を使う 散布図ではなく、棒グラフまたは箱ひげ図で代表値を図示する geom_jitter()は散布図の点をランダムに「散らして」表示する関数です。実際に見てみましょう。 saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) %&gt;% ggplot(aes(x = highschool, y = inc)) + geom_jitter(width = 0.2) これで多少見やすくなりました。width = 0.2では、散らす幅を指定しています。 10.2.2 棒グラフ 棒グラフでカテゴリごとの代表値を示したい場合は、geom_bar()ではなくstat_summary()を使います。 stat_summary()のfun.yで使用したい代表値を（ここでは平均mean）、geomで表示方法ここでは棒グラフbarを指定します。 saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) %&gt;% ggplot(aes(x = highschool, y = inc)) + stat_summary(fun.y = &quot;mean&quot;, geom = &quot;bar&quot;) これでカテゴリ別の平均値を棒グラフで示すことができました。 10.2.3 箱ひげ図 箱ひげ図でカテゴリごとの代表値を示すこともできます。 箱ひげ図を描くにはgeom_boxplotを用います。 saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) %&gt;% ggplot(aes(x = highschool, y = inc)) + geom_boxplot() 箱ひげ図は以下のように読み取ります。 白い箱の下辺：第一四分位（25%点） 中央の太線：中央値（50%点） 白い箱の上辺：第三四分位（75%点） 箱の出ている線の長さ：1.5×IQR（第三四分位 - 第一四分位） 線の外側にある点：外れ値 なお、図を組み合わせることによりわかりやすくなるかもしれません。 geom_jitter()による散布図と箱ひげ図を組み合わせてみましょう。 ggplot2では、geom_xxxxを+でつなげることで、図を重ねることができます。 saving %&gt;% mutate(highschool = if_else(educ &gt;= 12, 1, 0), highschool = as_factor(highschool)) %&gt;% ggplot(aes(x = highschool, y = inc)) + geom_boxplot(outlier.shape = NA) + #外れ値を表示しないようオプションを設定 geom_jitter(width = 0.2) これでデータの全貌がわかりやすくなったでしょうか？ "],
["Ttest.html", "Chapter 11 t検定", " Chapter 11 t検定 2群の平均値の差についての検定であるt検定を実施してみましょう。 t検定を行うコマンドはt.test()です。t.test()は以下のように記述します。 t.test(従属変数 ~ 独立変数, data = データフレーム名) ここでは、blackを用いて、黒人とそれ以外で年間収入incに違いがあるかどうかを確認してみましょう。 t.test(inc ~ black, data = saving) ## ## Welch Two Sample t-test ## ## data: inc by black ## t = 1.8562, df = 7.3906, p-value = 0.1036 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -890.170 7726.938 ## sample estimates: ## mean in group 0 mean in group 1 ## 10180.527 6762.143 これでt検定を行うことができます。p値は0.103なので、今回は有意ではありませんでした。（差があるようには見えますが、黒人のサンプルが少ないことが影響していると思われます） なお、t.test()はデフォルトで2群の分散が等しいと仮定しない「Welchのt検定」を実施します。 オプションでvar.equal = TRUEとすれば分散が等しいと仮定した「スチューデントのt検定」が実施できますが、通常分散は異なることが多いため、デフォルトのままWelchのt検定を使用するのが良いでしょう。 t検定の結果はあまり見やすい形式にはなっていません。 broomというパッケージの関数tidyを使うと、結果を表形式で見やすくすることができます。 まずはbloomをインストールしておきましょう。 install.packages(&quot;broom&quot;) その上で、tidy()を使ってみましょう。t.testの結果をパイプでつないでtidy()に渡してみます。 library(broom) t.test(inc ~ black, data = saving) %&gt;% tidy() ## # A tibble: 1 x 10 ## estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 3418. 10181. 6762. 1.86 0.104 7.39 -890. 7727. ## # … with 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt; 表示されている数値は以下のとおりです。 estimate: 平均値の差 estimate1: グループ1の平均 estimate2: グループ2の平均 statistic: t値 p.value: p値 parameter: 自由度 conf.low, conf.high: 信頼区間の下限、上限 method: 使用した方法 alternative: 両側検定か片側検定か "],
["Regression.html", "Chapter 12 回帰分析 12.1 線形回帰とは 12.2 Rでの線形回帰 12.3 重回帰分析 12.4 ダミー変数の利用 12.5 カテゴリ変数の利用 12.6 交互作用の導入 12.7 回帰分析の表をまとめる", " Chapter 12 回帰分析 回帰分析とは、従属変数と独立変数の関係を数式（モデル）で表し、そのパラメータを推定する分析方法です。 ここでは、もっとも基本的な回帰分析である線形回帰（Linear Regression）を扱います。 12.1 線形回帰とは 線形回帰では、従属変数 \\(y\\) と説明変数 \\(x\\) があるとき、\\(y\\) と \\(x\\) の関係の以下の式（回帰式）で表します。 \\(y = \\alpha + \\beta x\\) 別の言い方をすると、 \\(y\\) を \\(x\\) の１次関数で表すと言うことです。 傾きを示す \\(\\beta\\) は \\(x\\) と \\(y\\) の関係を示す重要な数値で、係数（Coefficient）と呼ばれます。 これがプラスであれば \\(x\\) と \\(y\\) に正の関係があることになりますし、マイナスであれば負の関係、0であれば関係がないことになります。 \\(\\beta\\) は \\(x\\) が1単位高いとき、\\(y\\) が \\(\\beta\\) 単位高い、という意味になります。 回帰分析では変数の単位を常に把握して分析するよう心がけましょう。 \\(\\alpha\\) や \\(\\beta\\) は最小二乗法（OLS）という方法で推定します。 この文書ではRでの操作方法に特化して説明するので、詳しくは各自調べてください。 12.2 Rでの線形回帰 Rでは回帰式をy ~ xと表記します。（ここはChapter 11で学んだとt検定同じ表記です） 線形回帰を行う関数がlm()で（lmはlinear modelの略）、以下のように表記します。 lm(回帰式, data = データフレーム) 例として、従属変数を年収inc、独立変数を教育年数educとした線形回帰分析を行ってみましょう。 回帰式は \\(inc = \\alpha + \\beta educ\\) です。 lm(inc ~ educ, data = saving) ## ## Call: ## lm(formula = inc ~ educ, data = saving) ## ## Coefficients: ## (Intercept) educ ## 1342.7 742.5 Coefficientsのinterceptが\\(\\alpha\\)、educが\\(\\beta\\)を表します。 \\(\\beta\\)を見ると、教育年数が1年高いと年収が742.5ドル高くなっていることがわかります。 lm()を実施すると、以上のように係数の推定値を得ることができますが、統計的推測のための数値（t値、p値）がわかりません。 lm()の結果をsummary()に渡すと、詳細を見ることができます。 lm(inc ~ educ, data = saving) %&gt;% summary() ## ## Call: ## lm(formula = inc ~ educ, data = saving) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7570 -3297 -1288 1617 20743 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1342.7 1763.5 0.761 0.448 ## educ 742.5 146.1 5.084 1.78e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 4993 on 98 degrees of freedom ## Multiple R-squared: 0.2087, Adjusted R-squared: 0.2006 ## F-statistic: 25.84 on 1 and 98 DF, p-value: 1.777e-06 Coefficientsで以下の数値が表示されるようになりました。 それぞれの意味は教科書を確認してください。 Estimate: 係数 Std. Error: 標準誤差 t value: t値 Pr(&gt;|t|): p値 educのp値は1.78e-06と表記されています。 これは、\\(1.78 \\times 10^{-6} = 1.78 \\times 0.000001 = 0.00000178\\)を表します。 とても小さい値なので、educの係数 \\(\\beta\\) は有意に負と言えます。 他にも、決定係数 \\(R^2\\) などの数値も記載されています。 summary()で詳細を見ることができますが、やや見づらい印象があります。 表形式にするため、Chapter 11と同じくbroomパッケージの関数tidy()を使ってみましょう。 lm(inc ~ educ, data = saving) %&gt;% tidy() ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 1343. 1764. 0.761 0.448 ## 2 educ 743. 146. 5.08 0.00000178 表形式で見やすくなりました。 ★練習問題 収入incを世帯人数sizeに回帰し、係数の意味を解釈してください。 12.3 重回帰分析 回帰分析には複数の説明変数を含め、それぞれの説明変数と被説明変数との変数を検証することができます。 複数の説明変数がある回帰分析を重回帰分析、一方上で説明した１つの説明変数がある回帰分析を単回帰分析と呼びます。 回帰式は説明変数を \\(x_1, x_2\\) としたとき、以下のようになります。 \\(y = \\alpha + \\beta_1 x_1 + \\beta_2 x_2\\) Rでの回帰式の表記は、y ~ x1 + x2と、説明変数を+でつなげます。 ここでは、収入incを教育年数educと世帯人数sizeに回帰してみましょう。 lm(inc ~ educ + size, data = saving) %&gt;% tidy() ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 3027. 2283. 1.33 0.188 ## 2 educ 743. 146. 5.10 0.00000171 ## 3 size -389. 335. -1.16 0.249 回帰式の解釈は単回帰分析と同様です。 ここでは、教育年数の結果は先ほどと大きく変わりませんでした。 説明変数はさらに3つ、4つ…と増やすことができ、Rではy ~ x1 + x2 + x3 + x4 + ...と+でつなげていきます。 説明変数が多く回帰式が長くなる場合は、回帰式を一旦オブジェクトとして保存しておくとコードが読みやすくなります。 例えば、上記の回帰分析にさらに年齢age、黒人ダミーblackを加えてみましょう。 equation &lt;- inc ~ educ + size + age + black lm(equation, data = saving) %&gt;% tidy() ## # A tibble: 5 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -10005. 3934. -2.54 0.0126 ## 2 educ 857. 144. 5.97 0.0000000408 ## 3 size -101. 320. -0.317 0.752 ## 4 age 271. 66.3 4.09 0.0000917 ## 5 black -553. 1878. -0.294 0.769 4つの説明変数による回帰分析の結果が出力できました。黒人ダミーの解釈については、次項をご覧ください。 ★練習問題 貯蓄額savを被説明変数、教育年数educ、世帯人数size、年齢ageを説明変数とする回帰分析を行い、それぞれの係数を解釈しなさい。 12.4 ダミー変数の利用 条件を満たすグループに1、条件を満たさないグループに0をとるダミー変数は、そのまま回帰分析に組み込むことができます。 ただし、解釈には注意が必要です。 ダミー変数の係数の解釈は、「条件を満たすグループは満たさないグループと比べて、被説明変数が（係数）大きい」となります。 ここでは、収入incを黒人ダミーblackに回帰してみましょう。 lm(inc ~ black, data = saving) ## ## Call: ## lm(formula = inc ~ black, data = saving) ## ## Coefficients: ## (Intercept) black ## 10181 -3418 黒人ダミーの係数は-3418です。これは、「黒人はそれ以外と比べて、年収が3418ドル低い」ことを意味します。 12.5 カテゴリ変数の利用 カテゴリ変数はそのまま回帰分析に組み込むことができません。 代わりにカテゴリの数-1個のダミー変数を作成し、回帰分析に組み込みます。 例えば、A, B, Cという3つのカテゴリがある場合、 Bであれば1、そうでなければ0をとる「Bダミー」 Cであれば1、そうでなければ0をとる「Cダミー」 を作成し、回帰分析の独立変数として両方入れます。 係数の解釈には注意が必要です。それぞれの係数の解釈は、ダミー変数として入っていない「参照レベル」との比較となります。 Bダミーの係数は「カテゴリBはカテゴリAと比べて被説明変数が（係数）大きい」 Cダミーの係数は「カテゴリCはカテゴリAと比べて被説明変数が（係数）大きい」 カテゴリBとカテゴリCを比べたい場合は、双方の係数を比較してください。 Rではカテゴリ変数がfactor型になっていれば、自動的にダミー変数を作成して回帰分析に入れてくれます。（もちろん、自分で作成しても構いませんし、そのほうが良い場合もあります） ここでは、年齢のカテゴリ変数age_categoryを作成し、年収incに対する回帰分析に組み込んでみましょう。 saving_with_age_category &lt;- saving %&gt;% mutate(age_category = case_when(age &lt; 30 ~ &quot;20s&quot;, age &gt;= 30 &amp; age &lt; 40 ~ &quot;30s&quot;, age &gt;= 40 &amp; age &lt; 50 ~ &quot;40s&quot;, age &gt;= 50 ~ &quot;50s&quot; ) ) lm(inc ~ age_category, data = saving_with_age_category) ## ## Call: ## lm(formula = inc ~ age_category, data = saving_with_age_category) ## ## Coefficients: ## (Intercept) age_category30s age_category40s age_category50s ## 7685 1330 3761 3885 ここでは自動的に&quot;20s&quot;が参照レベルとなり、回帰分析には含まれていません。 各係数は20代と比べて収入がどれくらい高いかを表します。 30代は20代より年収が1330ドル高い 40代は20代より年収が3761ドル高い 50代は20代より年収が3885ドル高い それぞれ比較すると、年収は20代&lt;30代&lt;40代&lt;50代と年齢が上がるにつれ高くなることがわかります。 しかし、40代と50代では差はほぼありません。 12.6 交互作用の導入 ある説明変数と被説明変数のとの関係が別の説明変数によって変化するような状況のことを交互作用がある、と言います。 例えば、収入と教育年数の関係が黒人ダミーによって異なる、といった場合です。 Rの回帰式では、交互作用は2つの変数を:でつなげることで表現できます。 上記の例をRで実施してみましょう。 lm(inc ~ educ + black + educ:black, data = saving) %&gt;% tidy() ## # A tibble: 4 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 1595. 1926. 0.828 0.410 ## 2 educ 727. 157. 4.63 0.0000115 ## 3 black -525. 5773. -0.0909 0.928 ## 4 educ:black -63.1 615. -0.103 0.918 交互作用の解釈は少し複雑になります。 まずここでは教育年数educの係数が727なので、教育年数1年高いと収入が727ドル高いことになります。 これは参照レベルである「黒人以外」での教育年数と収入の関係になります。 交互作用educ:blackは-63ですが、これは黒人での教育年数と収入の係数が727-63=664であることを意味します。 なので、黒人では教育年数が1年高いと収入が664ドル高いということになります。 ただし、ここでは交互作用のp値が大きく有意ではありません。 すなわち、「黒人とそれ以外では教育年数と収入の関係が同じ」という仮説は棄却できていません。 交互作用の分析の際は、交互作用に使用した変数単体も必ず回帰式に含めるようにしてください。 *を使用すると、単体・相互作用をすべて自動的に作成・分析してくれます。 lm(inc ~ educ*black, data = saving) %&gt;% tidy() ## # A tibble: 4 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 1595. 1926. 0.828 0.410 ## 2 educ 727. 157. 4.63 0.0000115 ## 3 black -525. 5773. -0.0909 0.928 ## 4 educ:black -63.1 615. -0.103 0.918 前の分析と全く同じ結果となっています。 ★練習問題 収入incと年齢ageの関係が黒人ダミーによって異なるかどうか、交互作用を含めた回帰分析を行い、その結果を解釈しなさい。 12.7 回帰分析の表をまとめる ここまでは、回帰分析の結果はtidy()を用いて整理し、卒業論文に貼り付ける想定で話を進めてきました。 回帰分析の数が少ない場合は、この方法でも十分でしょう。 しかし、実施した回帰分析が多い場合、同じような表が続き冗長になります。 ここでは、stargazerパッケージを用いて、複数の回帰分析の結果をまとめた表を作成してみる方法を説明します。 以下の2つの回帰分析をまとめて表にしてみましょう。 被説明変数を収入inc、説明変数を教育年数educとする単回帰分析 被説明変数を収入inc、説明変数を教育年数educと年齢ageとする重回帰分析 stargazer()では、回帰分析結果を保存したオブジェクト regression1 &lt;- lm(inc ~ educ, data = saving) #単回帰分析の結果をオブジェクトに保存 regression2 &lt;- lm(inc ~ educ + age, data = saving) #重回帰分析の結果をオブジェクトに保存 stargazer(regression1, regression2, type = &quot;html&quot;, out = &quot;test.doc&quot;) Dependent variable: inc (1) (2) educ 742.530*** 869.852*** (146.062) (137.566) age 276.677*** (63.872) Constant 1,342.745 -10,858.410*** (1,763.546) (3,250.631) Observations 100 100 R2 0.209 0.337 Adjusted R2 0.201 0.323 Residual Std. Error 4,992.593 (df = 98) 4,593.594 (df = 97) F Statistic 25.844*** (df = 1; 98) 24.646*** (df = 2; 97) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 1・2行目では、lm()で回帰分析を行い、結果をオブジェクトとしてregression1,regression2にそれぞれ入力しています。 stargazer()では、表に含める回帰分析の結果を引数とし、さらにオプションを指定します。 typeはデフォルトではLaTeXになっており多くの方は使えないと思いますので、ここではHTMLを指定して表形式に整えます。 outを指定すると、結果をファイルとして保存できます。 このファイルの表を卒業論文に貼り付け、必要に応じて加工すると良いでしょう。 表は列ごとに回帰分析の結果を示しています。 各行は説明変数を表し、かっこの無い上側が係数、かっこのある下側が標準誤差を表しています。 また、アスタリスク*で有意水準を表しています。 ***が有意水準1%で有意、**が有意水準5%で有意、*が有意水準10%で有意であることを示します。 線の下は以下のものを表しています。重要な情報なので、そのまま残しておきましょう。 Observation: 観測数 \\(R^2\\): 決定係数 Adjusted \\(R^2\\): 修正済み決定係数 Residual Std. Error: 残差の標準誤差 F Statistic: F値（F検定の結果も合わせて表示） "],
["Word.html", "Chapter 13 Wordファイルへの貼り付け 13.1 表の貼り付け", " Chapter 13 Wordファイルへの貼り付け 多くの学生がWordで卒業論文を作成すると思われるので、Wordへ貼り付ける方法を説明します。 Rで出た結果を目で見てWordに打ち込む方法は、タイプミスの危険がありおすすめしません。 13.1 表の貼り付け Wordへ表を貼り付けるには様々な方法がありますが、ここではExcelを経由する方法を説明します。 Rで作成した表をExcelにコピー＆ペースト 貼り付けた部分を選択し、上のタブからデータ＞区切り位置と選択 「固定長」を選び、次へ＞次へ＞完了 または、「区切り記号付き」→次へ＞スペースにチェック→次へ＞完了 表形式になったので、形式を整えて（例．小数点以下の処理）Wordに貼り付け RでWordの表を作成する方法としては、flextableパッケージなどを参照してください。（森もまだよくわかっておりません、情報募集中です） "]
]
